For the Python D&D 5E Project:

1. Use classes to modify states of a Character
 - Levels as states (level up class method, hitpoints, multiclassing easier)
 - combat state (initiative, combat actions as instances, such as dodge)
 - advantage/disadvantage state
 - status conditions: use class to define them and use Aggregation(/Association?) to link them to Character
 - death saves (part of unconscious state)
 - conecentration state
 - rage state (for barbarian)
 - inspiration state (created through Bard)
 - spells that cause states, like faerie fire (class method?)

2. Monster class to define monsters from the monster manual (use Beholder for example)
 - combat state to define lair actions during initiative
 - attacks based on monster properties

3. Weapons class, Armor class
 - Use Association to create Weapons class, Armor class (maybe Spellcasting?)
 - divide weapons into their separate types, define if proficiency with them is true or not
 - divide armor into their separate types (light, medium, heavy)

4. Subclasses as child class of Classes (1 per character class)
 - think about multiclassing (probably not doing this)

5. Inventory
 - Use Aggregation to create Inventory class
 
6. Issues:
 - how to add to the values of the ability scores
 - figure out why the ability scores cannot be accessed through Race instance
 - figure out why the random attribute is not accessible through Race
 - link the two fucking classes you absolute moron oh my god

From python.org:
"Classes provide a means of bundling data and functionality together. 
Creating a new class creates a new type of object, allowing new instances of that type to be made. 
Each class instance can have attributes attached to it for maintaining its state.
Class instances can also have methods (defined by its class) for modifying its state."

USE CLASS METHODS WHEN YOU NEED SOMETHING FOR THE CLASS